#!/sbin/sh
# AnyKernel2 Backend
# osm0sis @ xda-developers

OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";
DIR=`dirname "$ZIPFILE"`;

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD;
    shift;
  done;
}
show_progress() { echo "progress $1 $2" > $OUTFD; }
file_getprop() { grep "^$2=" "$1" | cut -d= -f2; }
if [ ! "$(getprop 2>/dev/null)" ]; then
  getprop() {
    local propval="$(file_getprop /default.prop $1 2>/dev/null)";
    test "$propval" || local propval="$(file_getprop $root/system/build.prop $1 2>/dev/null)";
    test "$propval" && echo "$propval" || echo "";
  }
fi;
cleanup() { rm -rf /tmp/anykernel; }
debugging() {
  case $(basename "$ZIPFILE" .zip) in
    *-debugging)
      ui_print " ";
      $bb tar -czvf "$DIR/anykernel2-$(date +%Y-%m-%d_%H%M%S)-debug.tgz" /tmp/*;
    ;;
  esac;
}
abort() {
  ui_print "$*";
  debugging;
  if [ ! -f /tmp/anykernel/anykernel.sh -o "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanuponabort 2>/dev/null)" == 1 ]; then
    cleanup;
  fi;
  umount /system;
  umount /vendor 2>/dev/null;
  umount /data 2>/dev/null;
  exit 1;
}
initclean() {
    rm -f /init.zuc.* /init.spectrum.*
}


show_progress 1.34 4;
ui_print " ";
cleanup;
initclean;
mkdir -p /tmp/anykernel/bin;
cd /tmp/anykernel;
unzip -o "$ZIPFILE";
if [ $? != 0 -o -z "$(ls /tmp/anykernel/tools)" ]; then
  abort "Shits gone wrong, mate. Aborting...";
fi;
bb=/tmp/anykernel/tools/busybox;
chmod 755 $bb;
$bb chmod -R 755 /tmp/anykernel/tools /tmp/anykernel/bin;

if [ -f /tmp/anykernel/banner ]; then
  while IFS='' read -r line || $bb [[ -n "$line" ]]; do
    ui_print "$line";
  done < /tmp/anykernel/banner;
  ui_print " ";
  ui_print " ";
fi;
if [ -f /tmp/anykernel/version ]; then
  ui_print " ";
  ui_print "$(cat /tmp/anykernel/version)";
  ui_print " ";
fi;
ui_print " ";
ui_print "AnyKernel2 by osm0sis @ xda-developers";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print "          )                       ";
ui_print "       ( /(                       ";
ui_print "       )\())    (                 ";
ui_print "      ((_)\    ))\    (      (    ";
ui_print "       _((_)  /((_)   )\     )\   ";
ui_print "      |_  /  (_))(   ((_)   ((_)  ";
ui_print "       / /   | || |  / _|   / _|  ";
ui_print "      /___|   \_,_|  \__|   \__|  ";                          
ui_print " ";
ui_print " ";
umount /system 2>/dev/null;
umount /vendor 2>/dev/null;
mount -o ro -t auto /system;
mount -o ro -t auto /vendor 2>/dev/null;
mount /data 2>/dev/null;
test -f /system/system/build.prop && root=/system;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.devicecheck)" == 1 ]; then
  for i in 1 2 3 4 5; do
    testname="$(file_getprop /tmp/anykernel/anykernel.sh device.name$i)";
    if [ "$(getprop ro.product.device)" == "$testname" -o "$(getprop ro.build.product)" == "$testname" ]; then
      match=1;
    fi;
  done;
  if [ "$match" != 1 ]; then
    abort "Boi atleast get the device right. Aborting...";
  fi;
  if [ "$(file_getprop /system/build.prop ro.treble.enabled)" == "true" ]; then
    dtb=/tmp/anykernel/treble;
  else
    dtb=/tmp/anykernel/non-treble;
  fi;
fi;

for i in $($bb --list); do
  $bb ln -s $bb /tmp/anykernel/bin/$i;
done;
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print "*Look out zucc, you're on fire";
ui_print "*Ohno it can't hear us";
ui_print "*Its wearing airpods";
ui_print " ";
ui_print " ";
ui_print " ";
if [ $? != 0 -o -z "$(ls /tmp/anykernel/bin)" ]; then
  abort "Recovery busybox setup failed. Aborting...";
fi;
cat /tmp/anykernel/kernel/Image.gz $dtb/*.dtb > /tmp/anykernel/Image.gz-dtb;
if [ $? != "0" ]; then
  abort;
fi;
PATH="/tmp/anykernel/bin:$PATH" $bb ash /tmp/anykernel/anykernel.sh $2;
if [ $? != "0" ]; then
  abort;
fi;


if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.modules)" == 1 ]; then
  mount -o rw,remount -t auto /system;
  mount -o rw,remount -t auto /vendor 2>/dev/null;
  cd /tmp/anykernel/modules;
  for module in $(find . -name '*.ko'); do
    case $module in
      */system/*) modtarget=$root/$module;;
      *) modtarget=/$module;;
    esac;
    if [ ! -e $modtarget ]; then
      case $module in
        */vendor/*) mod=vendor;;
        *) mod=system;;
      esac;
    fi;
    mkdir -p $(dirname $modtarget);
    $bb cp -rLf $module $modtarget;
    $bb chown 0:0 $modtarget;
    $bb chmod 644 $modtarget;
    if [ "$mod" ]; then
      chcon "u:object_r:${mod}_file:s0" $modtarget;
    fi;
  done;
  cd /tmp/anykernel;
  mount -o ro,remount -t auto /system;
  mount -o ro,remount -t auto /vendor 2>/dev/null;
fi;

cp -rLf /tmp/anykernel/modules/fstab.qcom /vendor/etc/fstab.qcom;
chmod 644 /vendor/etc/fstab.qcom;

debugging;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanup)" == 1 ]; then
  cleanup;
fi;
umount /system;
umount /vendor 2>/dev/null;
umount /data 2>/dev/null;
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print "*Journalist: Gets kicked out";
ui_print "*People with anime profiles:";
ui_print " L";
ui_print " E ";
ui_print " A ";
ui_print " R ";
ui_print " N ";
ui_print " ";
ui_print " T ";
ui_print " O ";
ui_print " ";
ui_print " C ";
ui_print " O ";
ui_print " D ";
ui_print " E ";
ui_print "*======================*";
ui_print "*      Zucc Kornel     *";
ui_print "*======================*";
